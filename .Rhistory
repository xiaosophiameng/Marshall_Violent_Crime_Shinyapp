scale_y_continuous("R", limits = c(0, 800))+
ggtitle(paste("Team:", team))+
scale_color_manual(values = c(lmer = "red", lm = "blue"))
print(p)
}
}
subset_teams <-
Teams_3 %>%
filter(teamID %in% c("BS1","CL1","NY2","PH1","TRO","WS3","BL1","BR2"))
subset_teams
subset_teams <-
Teams_3 %>%
filter(teamID %in% c("BS1","CL1","NY2","PH1","TR0","WS3","BL1","BR2"))
subset_teams
subset_teams <-
Teams_3 %>%
filter(teamID %in% c("BS1","CL1","NY2","PH1","TRO","WS3","BL1","BR2"))
subset_teams
# get the unique list of teamID
Teams_list <-as.character(unique(Teams_3$teamID))
# Number of unique teams
N <- length(Teams_list)
# 0s dataframe to save coefficient for mehtod #2
coef_lm <- data.frame(Intercept = rep(0,N), BB = rep(0,N))
rownames(coef_lm) <- rownames(coef_lmer)
M <- length(Teams_3$teamID)
model2 <- data.frame(teamID = Teams_3$teamID, fitted.values = rep(0,M), residuals = rep(0,M))
# iterate over all teams and fit a linear model for each team.
## teams with only one row are ignored
for (team in Teams_list){
lmfit <- lm(R ~ BB , data = Teams_3[Teams_3$teamID == team,])
coef_fit <- coef(lmfit)
coef_lm[team,]<-c(coef_fit[1], coef_fit[2])
coef_lm[team,]
model2$fitted.values[model2$teamID == team] <- lmfit$fitted.values
model2$residuals[model2$teamID == team] <- lmfit$residuals
}
# get the unique list of teamID
Teams_list <-as.character(unique(Teams_3$teamID))
# Number of unique teams
N <- length(Teams_list)
# 0s dataframe to save coefficient for mehtod #2
coef_lm <- data.frame(Intercept = rep(0,N), BB = rep(0,N))
rownames(coef_lm) <- rownames(coef_lmer)
M <- length(Teams_3$teamID)
model2 <- data.frame(teamID = Teams_3$teamID, fitted.values = rep(0,M), residuals = rep(0,M))
# iterate over all teams and fit a linear model for each team.
## teams with only one row are ignored
for (team in Teams_list){
lmfit <- lm(R ~ BB , data = Teams_3[Teams_3$teamID == team,])
coef_fit <- coef(lmfit)
coef_lm[team,]<-c(coef_fit[1], coef_fit[2])
print(coef_lm[team,])
model2$fitted.values[model2$teamID == team] <- lmfit$fitted.values
model2$residuals[model2$teamID == team] <- lmfit$residuals
}
# get the unique list of teamID
Teams_list <-as.character(unique(Teams_3$teamID))
# Number of unique teams
N <- length(Teams_list)
# 0s dataframe to save coefficient for mehtod #2
coef_lm <- data.frame(Intercept = rep(0,N), BB = rep(0,N))
rownames(coef_lm) <- rownames(coef_lmer)
M <- length(Teams_3$teamID)
model2 <- data.frame(teamID = Teams_3$teamID, fitted.values = rep(0,M), residuals = rep(0,M))
# iterate over all teams and fit a linear model for each team.
## teams with only one row are ignored
for (team in Teams_list){
lmfit <- lm(R ~ BB , data = Teams_3[Teams_3$teamID == team,])
coef_fit <- coef(lmfit)
coef_lm[team,]<-c(coef_fit[1], coef_fit[2])
model2$fitted.values[model2$teamID == team] <- lmfit$fitted.values
model2$residuals[model2$teamID == team] <- lmfit$residuals
}
subset_teams <-
Teams_3 %>%
filter(teamID %in% c("BS1","CL1","NY2","PH1","TRO","WS3","BL1","BR2"))
Teams_list_2 <- as.character(unique(subset_teams$teamID))
Teams_list_2
# X data for ploting linear lines
X <- data.frame(BB = c(-4, -3))
# plot 8 teams with fit from both method 1 and method 2
i = 0
for (team in Teams_list_2 ){
p <- ggplot()+
geom_point(data = Teams_3[Teams_3$teamID == team,], aes(x = BB, y = R), size = 4)+
stat_function(data = X, aes(x = BB, color = "lmer"), fun = function(x) (coef_lmer[team,1] + coef_lmer[team,2]*x), size = 1)+
stat_function(data = X, aes(x = BB, color = "lm"), fun = function(x) (coef_lm[team,1] + coef_lm[team,2]*x), size = 1)+
scale_x_continuous("BB (scaled)", limits = c(-3.8, -3))+
scale_y_continuous("R", limits = c(0, 800))+
ggtitle(paste("Team:", team))+
scale_color_manual(values = c(lmer = "red", lm = "blue"))
print(p)
}
}
# X data for ploting linear lines
X <- data.frame(BB = c(-4, -3))
# plot 8 teams with fit from both method 1 and method 2
i = 0
for (team in Teams_list_2 ){
p <- ggplot()+
geom_point(data = Teams_3[Teams_3$teamID == team,], aes(x = BB, y = R), size = 4)+
stat_function(data = X, aes(x = BB, color = "lmer"), fun = function(x) (coef_lmer[team,1] + coef_lmer[team,2]*x), size = 1)+
stat_function(data = X, aes(x = BB, color = "lm"), fun = function(x) (coef_lm[team,1] + coef_lm[team,2]*x), size = 1)+
scale_x_continuous("BB (scaled)", limits = c(-3.8, -3))+
scale_y_continuous("R", limits = c(0, 800))+
ggtitle(paste("Team:", team))+
scale_color_manual(values = c(lmer = "red", lm = "blue"))
print(p)
}
subset_teams <-
Teams_3 %>%
filter(teamID %in% c("BS1","CL1","NY2","ANA","TRO","WS3","BL1","BFN"))
Teams_list_2 <- as.character(unique(subset_teams$teamID))
Teams_list_2
# X data for ploting linear lines
X <- data.frame(BB = c(-4, -3))
# plot 8 teams with fit from both method 1 and method 2
i = 0
for (team in Teams_list_2 ){
p <- ggplot()+
geom_point(data = Teams_3[Teams_3$teamID == team,], aes(x = BB, y = R), size = 4)+
stat_function(data = X, aes(x = BB, color = "lmer"), fun = function(x) (coef_lmer[team,1] + coef_lmer[team,2]*x), size = 1)+
stat_function(data = X, aes(x = BB, color = "lm"), fun = function(x) (coef_lm[team,1] + coef_lm[team,2]*x), size = 1)+
scale_x_continuous("BB (scaled)", limits = c(-3.8, -3))+
scale_y_continuous("R", limits = c(0, 800))+
ggtitle(paste("Team:", team))+
scale_color_manual(values = c(lmer = "red", lm = "blue"))
print(p)
}
lme_fit <- lmer(R ~ BB + (1+BB|teamID), data = subset_teams)
subset_teams$lme_predict <- predict(lme_fit)
ggplot(subset_teams,aes(x=BB, y=R))+
geom_point() +
facet_wrap(~teamID)+
geom_line(aes(x=BB, y=lme_predict),col= "red")
lme_fit <- lmer(R ~ BB + (1+BB|teamID), data = subset_teams)
subset_teams$lme_predict <- predict(lme_fit)
ggplot(subset_teams,aes(x=BB, y=R))+
geom_point() +
facet_wrap(~teamID)+
geom_line(aes(x=BB, y=lme_predict),col= "red")+
scale_x_continuous("BB (scaled)", limits = c(-3.8, -3))+
scale_y_continuous("R", limits = c(0, 800))
lme_fit <- lmer(R ~ scaled(BB) + (1+scaled(BB)|teamID), data = subset_teams)
lme_fit <- lmer(R ~ scale(BB) + (1+scale(BB)|teamID), data = subset_teams)
subset_teams$lme_predict <- predict(lme_fit)
ggplot(subset_teams,aes(x=BB, y=R))+
geom_point() +
facet_wrap(~teamID)+
geom_line(aes(x=BB, y=lme_predict),col= "red")+
scale_x_continuous("BB", limits = c(-3.8, -3))+
scale_y_continuous("R", limits = c(0, 800))
lme_fit <- lmer(R ~ scale(BB) + (1+scale(BB)|teamID), data = subset_teams)
subset_teams$lme_predict <- predict(lme_fit)
ggplot(subset_teams,aes(x=BB, y=R))+
geom_point() +
facet_wrap(~teamID)+
geom_line(aes(x=BB, y=lme_predict),col= "red")
subset_teams <-
Teams_2 %>%
filter(teamID %in% c("BS1","CL1","NY2","ANA","TRO","WS3","BL1","BFN"))
lme_fit <- lmer(R ~ scale(BB) + (1+scale(BB)|teamID), data = subset_teams)
subset_teams <-
Teams_2 %>%
filter(teamID %in% c("BS1","CL1","NY2","ANA","TRO","WS3","BL1","BFN"))
subset_teams <-
Teams_3 %>%
filter(teamID %in% c("BS1","CL1","NY2","ANA","TRO","WS3","BL1","BFN"))
lme_fit <- lmer(R ~ scale(BB) + (1+scale(BB)|teamID), data = subset_teams)
subset_teams$lme_predict <- predict(lme_fit)
ggplot(subset_teams,aes(x=BB, y=R))+
geom_point() +
facet_wrap(~teamID)+
geom_line(aes(x=BB, y=lme_predict),col= "red")
Teams_2 <-
Teams %>%
filter(yearID>=1990)
Teams_3 <- Teams[c("yearID","teamID", "R", "BB", "H")]
Teams_3$BB <- as.numeric(I(scale(Teams_2$BB)))
library(Lahman)
library(tidyverse)
library(lme4)
library(cowplot)
library(mice)
Teams_2 <-
Teams %>%
filter(yearID>=1990)
Teams_3 <- Teams[c("yearID","teamID", "R", "BB", "H")]
Teams_3$BB <- as.numeric(I(scale(Teams_2$BB)))
Teams_2 <-
Teams %>%
filter(yearID>=1990)
Teams_3 <- Teams_2[c("yearID","teamID", "R", "BB", "H")]
Teams_3$BB <- as.numeric(I(scale(Teams_2$BB)))
Teams_3$H <- as.numeric(I(scale(Teams_2$H)))
Teams_model <- lmer(R ~ BB + H + (1+BB+H|teamID), data = Teams_3)
sum_model <- summary(Teams_model)
sum_model
sum_model$coefficients[, 1]
#show the variance–covariancematrix
apply(sum_model$varcor[[1]], 1:2, identity)
#show the variance–covariancematrix
apply(sum_model$varcor[[1]], 1:2, identity)
plot(Teams_model)
qqnorm(resid(Teams_model))
subset_teams <-
Teams_3 %>%
filter(teamID %in% c("BS1","CL1","NY2","ANA","TRO","WS3","BL1","BFN"))
subset_teams <-
Teams_3 %>%
filter(teamID %in% c("BS1","CL1","NY2","ANA","TRO","WS3","BL1","BFN"))
subset_teams
Teams_3
# Model 1: LME model
lme2 <-lmer(R ~ scale(BB) + (1 + scale(BB) | teamID), data = teams)
# Model 1:
lme2b <-lmer(R ~ scale(BB) + (1 + scale(BB) | teamID), data = teams)
subset_teams <-
Teams_3 %>%
filter(teamID %in% c("ATL","BAL","BOS","CAL","CHA","CHN","CIN","HOU"))
subset_teams
subset_teams <-
Teams_3 %>%
filter(teamID %in% c("ATL","BAL","BOS","CAL","CHA","CHN","CIN","HOU"))
# Model 1:
lme2b <-lmer(R ~ scale(BB) + (1 + scale(BB) | teamID), data = subset_teams)
lme2b_fitted <- broom::augment(lme2, data = teams)
# Model 1:
lme2b <-lmer(R ~ scale(BB) + (1 + scale(BB) | teamID), data = subset_teams)
lme2b_fitted <- broom::augment(lme2b, data = teams)
# Model 1:
lme2b <-lmer(R ~ scale(BB) + (1 + scale(BB) | teamID), data = subset_teams)
lme2b_fitted <- broom::augment(lme2b, data = subset_teams)
nine_teams_name <- levels(teams$teamID)[1:9]
subset_teams <-
Teams_3 %>%
filter(teamID %in% c("ATL","BAL","BOS","CAL","CHA","CHN","CIN","HOU")) %>%
droplevels()
# Model 1:
lme2b <-lmer(R ~ scale(BB) + (1 + scale(BB) | teamID), data = subset_teams)
lme2b_fitted <- broom::augment(lme2b, data = subset_teams)
lme2_fitted_8_teams <- lme2_fitted %>%
filter(teamID %in% nine_teams_name) %>%
droplevels()
# Model 1:
lme2b <-lmer(R ~ scale(BB) + (1 + scale(BB) | teamID), data = subset_teams)
lme2b_fitted <- broom::augment(lme2b, data = subset_teams)
ggplot(subset_teams )
geom_point(aes(BB, R)) +
geom_line(aes(BB, .fitted), color = "blue") +
facet_wrap(~teamID)
# Model 1:
lme2b <-lmer(R ~ scale(BB) + (1 + scale(BB) | teamID), data = subset_teams)
lme2b_fitted <- broom::augment(lme2b, data = subset_teams)
ggplot(lme2b_fitted) +
geom_point(aes(BB, R)) +
geom_line(aes(BB, .fitted), color = "blue") +
facet_wrap(~teamID)
# Model 1:
lme_model <-lmer(R ~ scale(BB) + (1 + scale(BB) | teamID), data = subset_teams)
lme_fitted <- broom::augment(lme_model, data = subset_teams)
p<-
lme_fitted %>%
ggplot() +
geom_point(aes(BB, R)) +
geom_line(aes(BB, .fitted), color = "blue") +
facet_wrap(~teamID)
p
# Model 2: Linear regression model for every team
ggplot(subset_teamss, aes(BB, R, group = teamID)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
facet_wrap(~teamID)
# Model 2: Linear regression model for every team
ggplot(subset_teams, aes(BB, R, group = teamID)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
facet_wrap(~teamID)
# X data for ploting linear lines
X <- data.frame(BB = c(-4, -3))
# plot 8 teams with fit from both method 1 and method 2
i = 0
for (team in as.character(Teams_list)){
if (!is.na(coef_lm[team,2])){
i <- i + 1
if (i > 8){
break
}
p <- ggplot()+
geom_point(data = Teams_dat[Teams_dat$teamID == team,], aes(x = BB, y = R), size = 4)+
stat_function(data = X, aes(x = BB, color = "lmer"), fun = function(x) (coef_lmer[team,1] + coef_lmer[team,2]*x), size = 1)+
stat_function(data = X, aes(x = BB, color = "lm"), fun = function(x) (coef_lm[team,1] + coef_lm[team,2]*x), size = 1)+
scale_x_continuous("BB (scaled)", limits = c(-3.8, -3))+
scale_y_continuous("R", limits = c(0, 800))+
ggtitle(paste("Team:", team))+
scale_color_manual(values = c(lmer = "red", lm = "blue"))
print(p)
}
}
plot(model1, which=1, main="Residual plot for model 1")
plot(lme_model)
model2 %>% ggplot(aes(fitted.values, residuals))+
geom_point(shape = 1)+
ggtitle("Residual plot for model 2")
team_list <-  c("ATL","BAL","BOS","CAL","CHA","CHN","CIN","HOU")
subset_teams <-
Teams_3 %>%
filter(teamID %in% team_list) %>%
droplevels()
# Model 1:
lme_model <-lmer(R ~ scale(BB) + (1 + scale(BB) | teamID), data = subset_teams)
lme_fitted <- broom::augment(lme_model, data = subset_teams)
p<-
lme_fitted %>%
ggplot() +
geom_point(aes(BB, R)) +
geom_line(aes(BB, .fitted), color = "blue") +
facet_wrap(~teamID)
p
# Model 2: Linear regression model for every team
ggplot(subset_teams, aes(BB, R, group = teamID)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
facet_wrap(~teamID)
#method 1
plot(lme_model)
lm_model <- data.frame(teamID = subset_teams$teamID, fitted.values = rep(0,8), residuals = rep(0,8))
lm_model <- data.frame(teamID = subset_teams$teamID, fitted.values = rep(0,196), residuals = rep(0,196))
for (team in team_list){
lm_fit <- lm(R ~ BB , data = Teams_dat[Teams_dat$teamID == team,])
coef_fit <- coef(lmfit)
coef_lm[team,]<-c(coef_fit[1], coef_fit[2])
model2$fitted.values[model2$teamID == team] <- lmfit$fitted.values
model2$residuals[model2$teamID == team] <- lmfit$residuals
}
lm_model <- data.frame(teamID = subset_teams$teamID, fitted.values = rep(0,8), residuals = rep(0,8))
# fit with mixed model
model1 <- lmer(R ~ BB + (1+BB|teamID), data = Teams_dat)
# get linear coefficients
coef_lmer <- coef(model1)$teamID
# show the first 6 coefficients (method 1)
head(coef_lmer,10)
print(paste("The variance for the intercepts of method #1:", var(coef_lmer[,1])))
print(paste("The variance for the slopes of method #1:", var(coef_lmer[,2])))
# get the unique list of teamID
Teams_list <-as.character(unique(Teams_dat$teamID))
# Number of unique teams
N <- length(Teams_list)
# 0s dataframe to save coefficient for mehtod #2
coef_lm <- data.frame(Intercept = rep(0,N), BB = rep(0,N))
rownames(coef_lm) <- rownames(coef_lmer)
M <- length(Teams_dat$teamID)
M
model2 <- data.frame(teamID = Teams_dat$teamID, fitted.values = rep(0,M), residuals = rep(0,M))
# iterate over all teams and fit a linear model for each team.
## teams with only one row are ignored
for (team in Teams_list){
lmfit <- lm(R ~ BB , data = Teams_dat[Teams_dat$teamID == team,])
coef_fit <- coef(lmfit)
coef_lm[team,]<-c(coef_fit[1], coef_fit[2])
model2$fitted.values[model2$teamID == team] <- lmfit$fitted.values
model2$residuals[model2$teamID == team] <- lmfit$residuals
}
# show the first 6 coefficients (method 2)
head(coef_lm,10)
print(paste("The variance for the intercepts of method #2:", var(coef_lm[,1])))
print(paste("The variance for the slopes of method #2:", var(coef_lm[,2], na.rm = TRUE)))
hist(coef_lm[,2], breaks=50, col="blue", main="Histogram for slope of model 2")
shiny::runApp()
runApp()
runApp()
runApp('~/Documents/Labs_for_mds/DSCI_532_milestone2')
runApp()
shiny::runApp()
knitr::opts_chunk$set(echo = TRUE)
library(Lahman)
library(tidyverse)
library(lme4)
library(cowplot)
theme_set(theme_gray())
library(mice)
Teams_dat <- Teams[c("teamID", "R", "BB", "H")]
Teams_dat$BB <- as.numeric(I(scale(Teams$BB)))
Teams_dat$H <- as.numeric(I(scale(Teams$H)))
Teams_fit <- lmer(R ~ BB + H + (1+BB+H|teamID), data = Teams_dat)
summary(Teams_fit)
# show the covariance matrix
VarCorr(Teams_fit)$teamID
plot(Teams_fit, which = 1)
# fit with mixed model
model1 <- lmer(R ~ BB + (1+BB|teamID), data = Teams_dat)
# get linear coefficients
coef_lmer <- coef(model1)$teamID
# show the first 6 coefficients (method 1)
head(coef_lmer,10)
print(paste("The variance for the intercepts of method #1:", var(coef_lmer[,1])))
print(paste("The variance for the slopes of method #1:", var(coef_lmer[,2])))
# get the unique list of teamID
Teams_list <-as.character(unique(Teams_dat$teamID))
# Number of unique teams
N <- length(Teams_list)
# 0s dataframe to save coefficient for mehtod #2
coef_lm <- data.frame(Intercept = rep(0,N), BB = rep(0,N))
rownames(coef_lm) <- rownames(coef_lmer)
M <- length(Teams_dat$teamID)
model2 <- data.frame(teamID = Teams_dat$teamID, fitted.values = rep(0,M), residuals = rep(0,M))
# iterate over all teams and fit a linear model for each team.
## teams with only one row are ignored
for (team in Teams_list){
lmfit <- lm(R ~ BB , data = Teams_dat[Teams_dat$teamID == team,])
coef_fit <- coef(lmfit)
coef_lm[team,]<-c(coef_fit[1], coef_fit[2])
model2$fitted.values[model2$teamID == team] <- lmfit$fitted.values
model2$residuals[model2$teamID == team] <- lmfit$residuals
}
# show the first 6 coefficients (method 2)
head(coef_lm,10)
print(paste("The variance for the intercepts of method #2:", var(coef_lm[,1])))
print(paste("The variance for the slopes of method #2:", var(coef_lm[,2], na.rm = TRUE)))
hist(coef_lm[,2], breaks=50, col="blue", main="Histogram for slope of model 2")
# X data for ploting linear lines
X <- data.frame(BB = c(-4, -3))
# plot 8 teams with fit from both method 1 and method 2
i = 0
for (team in as.character(Teams_list)){
if (!is.na(coef_lm[team,2])){
i <- i + 1
if (i > 8){
break
}
p <- ggplot()+
geom_point(data = Teams_dat[Teams_dat$teamID == team,], aes(x = BB, y = R), size = 4)+
stat_function(data = X, aes(x = BB, color = "lmer"), fun = function(x) (coef_lmer[team,1] + coef_lmer[team,2]*x), size = 1)+
stat_function(data = X, aes(x = BB, color = "lm"), fun = function(x) (coef_lm[team,1] + coef_lm[team,2]*x), size = 1)+
scale_x_continuous("BB (scaled)", limits = c(-3.8, -3))+
scale_y_continuous("R", limits = c(0, 800))+
ggtitle(paste("Team:", team))+
scale_color_manual(values = c(lmer = "red", lm = "blue"))
print(p)
}
}
plot(model1, which=1, main="Residual plot for model 1")
model2 %>% ggplot(aes(fitted.values, residuals))+
geom_point(shape = 1)+
ggtitle("Residual plot for model 2")
data <- read.csv("./titanic-train.csv")
print(paste("The proportion of class 3 in all people having missing `Age`:", dim(data[is.na(data$Age) & data$Pclass == 3, ])[1]/dim(data[is.na(data$Age), ])[1]))
print(paste("The proportion of class 3 in all people with `Age`:", dim(data[(!is.na(data$Age)) & data$Pclass == 3, ])[1]/dim(data[!is.na(data$Age), ])[1]))
glm_complete <- glm(Survived ~ Age + Sex + Fare, data = data, family = binomial(link = "logit"), na.action = "na.omit")
summary(glm_complete)
data <- data %>% mutate(Age2 = Age)
data$Age2[is.na(data$Age)] <- mean(data$Age, na.rm = T)
glm_mean_imputation <- glm(Survived ~ Age2 + Sex + Fare, data = data, family = binomial(link = "logit"))
summary(glm_mean_imputation)
data <- read.csv("./titanic-train.csv")
data <- data %>% select(Survived, Age, Sex, Fare)
invisible(tempData <- mice(data, maxit=20, seed=500));
glm_mice <- glm.mids(Survived ~ Age + Sex + Fare, data = tempData, family = binomial(link = "logit"))
summary(glm_mice)
data <- read.csv("titanic-train.csv")
print(paste("The proportion of class 3 in all people having missing `Age`:", dim(data[is.na(data$Age) & data$Pclass == 3, ])[1]/dim(data[is.na(data$Age), ])[1]))
print(paste("The proportion of class 3 in all people with `Age`:", dim(data[(!is.na(data$Age)) & data$Pclass == 3, ])[1]/dim(data[!is.na(data$Age), ])[1]))
data <- read.csv("titanic-train.csv")
titanic %>%
group_by(Pclass)
data <- read.csv("titanic-train.csv")
data %>%
group_by(Pclass)
data <-
titanic %>%
group_by(Pclass)
titanic <- read.csv("titanic-train.csv")
data <-
titanic %>%
group_by(Pclass)
titanic2 <-
titanic %>%
group_by(Pclass)
titanic2 <-
titanic %>%
group_by(Pclass)
titanic2
titanic2 %>%
ggplot(aes(x=Pclass,y=is.na(Age))) +
geom_jitter()
titanic2 %>%
ggplot(aes(x=Pclass,y=is.na(Age))) +
geom_jitter() +
labs(x = "class", y = "missing age", title = "class vs missing age") +
theme(plot.title = element_text(hjust=0.5,face = "bold"))
titanic2 <-
titanic %>%
group_by(Pclass)
titanic2 %>%
ggplot(aes(x=Pclass,y=is.na(Age))) +
geom_jitter() +
labs(x = "class", y = "missing age", title = "class vs missing age") +
theme(plot.title = element_text(hjust=0.5,face = "bold"))
shiny::runApp()
runApp('~/Documents/532_milestone/Sumrn')
install.packages("DT")
runApp('~/Documents/532_milestone/Sumrn')
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
